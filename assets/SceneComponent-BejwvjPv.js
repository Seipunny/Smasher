import{r as V,j as so}from"./react-CvKGWo5O.js";import{E as no,S as ro,A as io,V as i,H as ao,C as co,a as N,b as _,M as g,P as a,c as lo,d as B,T as j,B as po,e as H,f as D}from"./@babylonjs-DVLBZ_eI.js";import{C as ho}from"./cannon-ChDEuZbQ.js";import"./asn1.js-mD9ru2de.js";import"./vite-plugin-node-polyfills-eJnqEgiU.js";import"./inherits-BICa84dG.js";import"./minimalistic-assert-OF9c2MWr.js";import"./vm-browserify-B6h6MQBh.js";const Bo=()=>{const G=V.useRef(null);return V.useEffect(()=>{const v=G.current;if(!v)return;const P=o=>o.preventDefault();document.addEventListener("touchstart",P,{passive:!1}),document.addEventListener("touchmove",P,{passive:!1});const A=new no(v,!0),t=new ro(A);let z=0;const b=10,u=1,y=2,I=4,c=8,W=16,w=new io("camera",Math.PI/4,Math.PI/4,20,new i(0,25,0),t);w.mode=1,w.attachControl(v,!0);const T=10,L=()=>{const o=v.width/v.height,e=T/o;w.orthoLeft=-T,w.orthoRight=T,w.orthoTop=e,w.orthoBottom=-e};window.addEventListener("resize",L),L(),w.lowerRadiusLimit=w.upperRadiusLimit=w.radius;const Z=new ao("light",new i(Math.sin(Math.PI/18),1,Math.cos(Math.PI/18)),t);Z.intensity=1;const U=new co(!0,10,ho);t.enablePhysics(new i(0,-9.81,0),U);const J=async(o,e)=>{try{const n=await H.ImportMeshAsync("","./models/","generator.obj");console.log("ImportMeshAsync result:",n);const s=new D("parentNode",o);s.position=e,s.scaling=new i(2.5,2.5,2.5),n.meshes.forEach((p,to)=>{console.log(`Imported Mesh ${to} name: ${p.name}`),p.parent=s});const r=n.meshes.find(p=>p.name==="SM_Bld_Corp_Generator_01_Arms_01");r?(console.log("Found rotating mesh:",r.name),o.registerBeforeRender(()=>{r.addRotation(0,.01,0)})):console.warn("Rotating mesh not found.");const l=n.meshes.find(p=>p.name==="SM_Bld_Corp_Generator_01_Tank_01");l?(console.log("Found rotating mesh:",l.name),o.registerBeforeRender(()=>{l.addRotation(0,-.01,0)})):console.warn("Rotating mesh not found."),console.log("All meshes grouped and placed at position",e)}catch(n){console.error("Error loading mesh:",n)}},q=async(o,e)=>{try{const n=await H.ImportMeshAsync("","./models/","container.obj");console.log("ImportMeshAsync result:",n);const s=new D("parentNode",o);s.position=e,s.scaling=new i(4.5,4.5,4.5),n.meshes.forEach((r,l)=>{console.log(`Imported Mesh ${l} name: ${r.name}`),r.parent=s})}catch(n){console.error("Error loading mesh:",n)}},O=(o,e,n)=>{const s=g.CreateBox(o,{width:10,height:1,depth:10},t);s.position.y=e,s.physicsImpostor=new a(s,a.BoxImpostor,{mass:0,restitution:.9},t);const r=new N(`${o}Material`,t);return r.diffuseColor=new _(.5,.5,.5),r.alpha=.5,s.material=r,s.physicsImpostor.physicsBody.collisionFilterGroup=n,s.physicsImpostor.physicsBody.collisionFilterMask=u|y|I|c,s};O("ground",25,I),O("lowerPlatform",20,c),J(t,new i(0,37.3,0)),q(t,new i(0,9.5,0)),(()=>{const o=g.CreateBox("greenBox",{width:1,height:1,depth:10},t);o.position.y=21,o.position.x=-4.5,o.physicsImpostor=new a(o,a.BoxImpostor,{mass:0,restitution:.9},t);const e=new N("greenBoxMaterial",t);e.diffuseColor=new _(0,1,0),o.material=e,o.physicsImpostor.physicsBody.collisionFilterGroup=W,o.physicsImpostor.physicsBody.collisionFilterMask=u|c;let n=1;const s=.05,r=-4.5,l=4.5;t.onBeforeRenderObservable.add(()=>{o.position.x+=n*s,o.position.x>=l?(o.position.x=l,n=-1):o.position.x<=r&&(o.position.x=r,n=1),t.meshes.forEach(p=>{p.name.startsWith("fragment")&&o.intersectsMesh(p,!1)&&(p.dispose(),z+=1,M.text=`Balance: ${z}`)})})})();const K=()=>{if(t.meshes.filter(e=>e.name==="box"&&!e.isCrushed).length<b){const e=g.CreateBox("box",{size:1},t);e.position=new i(Math.random()*4-2,37,Math.random()*4-2),e.rotation=new i(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),e.physicsImpostor=new a(e,a.BoxImpostor,{mass:2,restitution:.5},t),e.physicsImpostor.physicsBody.collisionFilterGroup=u|y|I|c,e.physicsImpostor.physicsBody.collisionFilterMask=u|y|I|c,e.isCrushed=!1}},E=(o,e,n,s)=>{const r=g.CreateBox("wall",{width:o,height:e,depth:n},t);r.position=s,r.isVisible=!1,r.physicsImpostor=new a(r,a.BoxImpostor,{mass:0,restitution:.9},t),r.physicsImpostor.physicsBody.collisionFilterGroup=u,r.physicsImpostor.physicsBody.collisionFilterMask=u|y|I|c};E(10,40,1,new i(0,20,-5.5)),E(10,40,1,new i(0,20,5.5)),E(1,40,10,new i(-5.5,20,0)),E(1,40,10,new i(5.5,20,0)),E(10,1,10,new i(0,40,0));const F=new N("pressMaterial",t);F.diffuseColor=new _(0,0,0);const h=g.CreateBox("leftPress",{width:2,height:3,depth:10},t);h.position=new i(-4.5,27,0),h.material=F,h.physicsImpostor=new a(h,a.BoxImpostor,{mass:0,restitution:.9},t),h.physicsImpostor.physicsBody.collisionFilterGroup=y,h.physicsImpostor.physicsBody.collisionFilterMask=u|y|I|c;const m=g.CreateBox("rightPress",{width:2,height:3,depth:10},t);m.position=new i(4.5,27,0),m.material=F,m.physicsImpostor=new a(m,a.BoxImpostor,{mass:0,restitution:.9},t),m.physicsImpostor.physicsBody.collisionFilterGroup=y,m.physicsImpostor.physicsBody.collisionFilterMask=u|y|I|c;let R=!1;const Q=o=>{const n=g.CreateBox("fragment1",{size:.5},t);n.position=new i(o.x-.25,o.y,o.z),n.physicsImpostor=new a(n,a.BoxImpostor,{mass:1,restitution:.5},t),n.physicsImpostor.physicsBody.collisionFilterGroup=c,n.physicsImpostor.physicsBody.collisionFilterMask=u|c;const s=g.CreateBox("fragment2",{size:.5},t);s.position=new i(o.x+.25,o.y,o.z),s.physicsImpostor=new a(s,a.BoxImpostor,{mass:1,restitution:.5},t),s.physicsImpostor.physicsBody.collisionFilterGroup=c,s.physicsImpostor.physicsBody.collisionFilterMask=u|c;const r=l=>{if(l.physicsImpostor){const p=new i((Math.random()-.5)*2,(Math.random()-.5)*2,(Math.random()-.5)*2).normalize().scale(10);l.physicsImpostor.applyImpulse(p,l.getAbsolutePosition())}};r(n),r(s)},k=()=>{t.meshes.forEach(o=>{const e=o;e.name==="box"&&!e.isCrushed&&e.intersectsMesh(h,!1)&&e.intersectsMesh(m,!1)&&(Q(e.position),e.isCrushed=!0,e.dispose())})},X=()=>{if(h.position.x===-4.5&&m.position.x===4.5){if(R)return;R=!0;const o=.1,e=10,n=Math.abs(-4.5- -.75)/o;let s=0;const r=setInterval(()=>{s<n?(h.position.x+=o,m.position.x-=o,s++,k()):s<2*n?(h.position.x-=o,m.position.x+=o,s++,k()):(clearInterval(r),h.position=new i(-4.5,27,0),m.position=new i(4.5,27,0),R=!1)},e)}},S=lo.CreateFullscreenUI("UI"),d=new B;d.width="200px",d.height="100px",d.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_LEFT,d.verticalAlignment=B.VERTICAL_ALIGNMENT_TOP,d.isVertical=!0,d.top="10px",d.left="10px",S.addControl(d);const M=new j;M.text="Balance: 0",M.color="white",M.fontSize=24,M.width="200px",M.height="40px",d.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_CENTER,d.addControl(M);const f=new j;f.text=`0/${b}`,f.color="white",f.fontSize=24,f.width="200px",f.height="40px",f.paddingTop="10px",d.addControl(f);const x=new B;x.width="100%",x.height="50px",x.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_CENTER,x.verticalAlignment=B.VERTICAL_ALIGNMENT_BOTTOM,x.isVertical=!1,x.paddingBottom="10px",S.addControl(x);const C=po.CreateSimpleButton("pressButton","Press");C.width="150px",C.height="40px",C.color="white",C.background="black",C.onPointerDownObservable.add(()=>{X()}),x.addControl(C);const Y=setInterval(K,1e3),oo=()=>{const o=t.meshes.filter(e=>e.name==="box"&&!e.isCrushed).length;f.text=`${o}/${b}`},eo=()=>{t.meshes.forEach(o=>{const e=o;e.name==="box"&&!e.isCrushed&&o.position.y<=24&&e.dispose()})};A.runRenderLoop(()=>{t.render(),eo(),oo()});const $=()=>{A.resize(),L()};return window.addEventListener("resize",$),()=>{clearInterval(Y),A.dispose(),window.removeEventListener("resize",$),window.removeEventListener("resize",L),document.removeEventListener("touchstart",P),document.removeEventListener("touchmove",P)}},[]),so.jsx("canvas",{ref:G,style:{width:"100vw",height:"100vh"},tabIndex:-1})};export{Bo as default};
