import{r as _,j as K}from"./react-LlHOpfm0.js";import{E as Q,S as X,A as Y,V as r,H as ss,C as os,a as A,b as R,M as w,P as a,c as ts,d as B,T as V,B as es}from"./@babylonjs-D5aF5YGD.js";import{C as is}from"./cannon-DkVCJKaD.js";const ls=()=>{const N=_.useRef(null);return _.useEffect(()=>{const C=N.current;if(!C)return;const b=new Q(C,!0),t=new X(b);let z=0;const T=10,m=1,u=2,I=4,c=8,H=16,d=new Y("camera",Math.PI/2,Math.PI/2,10,new r(0,25,0),t);d.mode=1,d.attachControl(C,!0),d.lowerRadiusLimit=d.upperRadiusLimit=d.radius;const E=()=>{const s=C.width/C.height,o=10,i=o/s;d.orthoLeft=-o/2,d.orthoRight=o/2,d.orthoTop=i/2,d.orthoBottom=-i/2};window.addEventListener("resize",E),E();const $=new ss("light",new r(Math.sin(Math.PI/18),1,Math.cos(Math.PI/18)),t);$.intensity=.7;const j=new os(!0,10,is);t.enablePhysics(new r(0,-9.81,0),j);const G=(s,o,i)=>{const e=w.CreateBox(s,{width:10,height:1,depth:10},t);e.position.y=o,e.physicsImpostor=new a(e,a.BoxImpostor,{mass:0,restitution:.9},t);const n=new A(`${s}Material`,t);return n.diffuseColor=new R(.5,.5,.5),e.material=n,e.physicsImpostor.physicsBody.collisionFilterGroup=i,e.physicsImpostor.physicsBody.collisionFilterMask=m|u|I|c,e};G("ground",25,I),G("lowerPlatform",20,c),(()=>{const s=w.CreateBox("greenBox",{width:1,height:1,depth:10},t);s.position.y=21,s.position.x=-4.5,s.physicsImpostor=new a(s,a.BoxImpostor,{mass:0,restitution:.9},t);const o=new A("greenBoxMaterial",t);o.diffuseColor=new R(0,1,0),s.material=o,s.physicsImpostor.physicsBody.collisionFilterGroup=H,s.physicsImpostor.physicsBody.collisionFilterMask=m|c;let i=1;const e=.05,n=-4.5,M=4.5;t.onBeforeRenderObservable.add(()=>{s.position.x+=i*e,s.position.x>=M?(s.position.x=M,i=-1):s.position.x<=n&&(s.position.x=n,i=1),t.meshes.forEach(v=>{v.name.startsWith("fragment")&&s.intersectsMesh(v,!1)&&(v.dispose(),z+=1,f.text=`Balance: ${z}`)})})})();const D=()=>{if(t.meshes.filter(o=>o.name==="box"&&!o.isCrushed).length<T){const o=w.CreateBox("box",{size:1},t);o.position=new r(Math.random()*4-2,37,Math.random()*4-2),o.rotation=new r(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),o.physicsImpostor=new a(o,a.BoxImpostor,{mass:2,restitution:.5},t),o.physicsImpostor.physicsBody.collisionFilterGroup=m|u|I|c,o.physicsImpostor.physicsBody.collisionFilterMask=m|u|I|c,o.isCrushed=!1}},P=(s,o,i,e)=>{const n=w.CreateBox("wall",{width:s,height:o,depth:i},t);n.position=e,n.isVisible=!1,n.physicsImpostor=new a(n,a.BoxImpostor,{mass:0,restitution:.9},t),n.physicsImpostor.physicsBody.collisionFilterGroup=m,n.physicsImpostor.physicsBody.collisionFilterMask=m|u|I|c};P(10,40,1,new r(0,20,-5.5)),P(10,40,1,new r(0,20,5.5)),P(1,40,10,new r(-5.5,20,0)),P(1,40,10,new r(5.5,20,0)),P(10,1,10,new r(0,40,0));const F=new A("pressMaterial",t);F.diffuseColor=new R(0,0,0);const l=w.CreateBox("leftPress",{width:2,height:3,depth:10},t);l.position=new r(-4.5,27,0),l.material=F,l.physicsImpostor=new a(l,a.BoxImpostor,{mass:0,restitution:.9},t),l.physicsImpostor.physicsBody.collisionFilterGroup=u,l.physicsImpostor.physicsBody.collisionFilterMask=m|u|I|c;const p=w.CreateBox("rightPress",{width:2,height:3,depth:10},t);p.position=new r(4.5,27,0),p.material=F,p.physicsImpostor=new a(p,a.BoxImpostor,{mass:0,restitution:.9},t),p.physicsImpostor.physicsBody.collisionFilterGroup=u,p.physicsImpostor.physicsBody.collisionFilterMask=m|u|I|c;let L=!1;const W=s=>{const i=w.CreateBox("fragment1",{size:.5},t);i.position=new r(s.x-.25,s.y,s.z),i.physicsImpostor=new a(i,a.BoxImpostor,{mass:1,restitution:.5},t),i.physicsImpostor.physicsBody.collisionFilterGroup=c,i.physicsImpostor.physicsBody.collisionFilterMask=m|c;const e=w.CreateBox("fragment2",{size:.5},t);e.position=new r(s.x+.25,s.y,s.z),e.physicsImpostor=new a(e,a.BoxImpostor,{mass:1,restitution:.5},t),e.physicsImpostor.physicsBody.collisionFilterGroup=c,e.physicsImpostor.physicsBody.collisionFilterMask=m|c;const n=M=>{if(M.physicsImpostor){const v=new r((Math.random()-.5)*2,(Math.random()-.5)*2,(Math.random()-.5)*2).normalize().scale(10);M.physicsImpostor.applyImpulse(v,M.getAbsolutePosition())}};n(i),n(e)},O=()=>{t.meshes.forEach(s=>{const o=s;o.name==="box"&&!o.isCrushed&&o.intersectsMesh(l,!1)&&o.intersectsMesh(p,!1)&&(W(o.position),o.isCrushed=!0,o.dispose())})},Z=()=>{if(l.position.x===-4.5&&p.position.x===4.5){if(L)return;L=!0;const s=.1,o=10,i=Math.abs(-4.5- -.75)/s;let e=0;const n=setInterval(()=>{e<i?(l.position.x+=s,p.position.x-=s,e++,O()):e<2*i?(l.position.x-=s,p.position.x+=s,e++,O()):(clearInterval(n),l.position=new r(-4.5,27,0),p.position=new r(4.5,27,0),L=!1)},o)}},k=ts.CreateFullscreenUI("UI"),h=new B;h.width="200px",h.height="100px",h.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_LEFT,h.verticalAlignment=B.VERTICAL_ALIGNMENT_TOP,h.isVertical=!0,h.top="10px",h.left="10px",k.addControl(h);const f=new V;f.text="Balance: 0",f.color="white",f.fontSize=24,f.width="200px",f.height="40px",h.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_CENTER,h.addControl(f);const x=new V;x.text=`0/${T}`,x.color="white",x.fontSize=24,x.width="200px",x.height="40px",x.paddingTop="10px",h.addControl(x);const y=new B;y.width="100%",y.height="50px",y.horizontalAlignment=B.HORIZONTAL_ALIGNMENT_CENTER,y.verticalAlignment=B.VERTICAL_ALIGNMENT_BOTTOM,y.isVertical=!1,y.paddingBottom="10px",k.addControl(y);const g=es.CreateSimpleButton("pressButton","Press");g.width="150px",g.height="40px",g.color="white",g.background="black",g.onPointerDownObservable.add(()=>{Z()}),y.addControl(g);const U=setInterval(D,1e3),J=()=>{const s=t.meshes.filter(o=>o.name==="box"&&!o.isCrushed).length;x.text=`${s}/${T}`},q=()=>{t.meshes.forEach(s=>{s.position.y<=0&&s.dispose()})};b.runRenderLoop(()=>{t.render(),q(),J()});const S=()=>{b.resize(),E()};return window.addEventListener("resize",S),()=>{clearInterval(U),b.dispose(),window.removeEventListener("resize",S),window.removeEventListener("resize",E)}},[]),K.jsx("canvas",{ref:N,style:{width:"100vw",height:"100vh"},tabIndex:-1})};export{ls as default};
