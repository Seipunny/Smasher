import{r as D,j as ee}from"./react-LlHOpfm0.js";import{E as te,S as se,A as oe,V as n,H as ie,C as ne,a as re,b as L,T as ae,c as z,M as y,P as a,d as ce,e as g,f as $,B as le}from"./@babylonjs-kQxZBRCH.js";import{C as pe}from"./cannon-DkVCJKaD.js";const xe=()=>{const G=D.useRef(null);return D.useEffect(()=>{const C=G.current;if(!C)return;const P=e=>e.preventDefault();document.addEventListener("touchstart",P,{passive:!1}),document.addEventListener("touchmove",P,{passive:!1});const T=new te(C,!0),s=new se(T);let k=0;const F=10,d=1,u=2,f=4,c=8,W=16,m=new oe("camera",Math.PI/4,Math.PI/4,20,new n(0,25,0),s);m.mode=1,m.attachControl(C,!0);const A=20,b=()=>{const e=C.width/C.height,t=A/e;m.orthoLeft=-A/2,m.orthoRight=A/2,m.orthoTop=t/2,m.orthoBottom=-t/2};window.addEventListener("resize",b),b(),m.lowerRadiusLimit=m.upperRadiusLimit=m.radius;const Z=new ie("light",new n(Math.sin(Math.PI/18),1,Math.cos(Math.PI/18)),s);Z.intensity=1;const U=new ne(!0,10,pe);s.enablePhysics(new n(0,-9.81,0),U);const O=new re(s),S=O.addMeshTask("loadMesh","","https://seipunny.github.io/Smasher/models/","model.obj");S.onSuccess=e=>{e.loadedMeshes.forEach(t=>{t.position=new n(Math.random()*4-2,37,Math.random()*4-2),t.scaling=new n(.1,.1,.1);const i=new L("modelMaterial",s);i.diffuseTexture=new ae("https://seipunny.github.io/Smasher/textures/texture.png",s),t.material=i})},S.onError=(e,t)=>{console.error(e,t)},O.load();const _=(e,t,i)=>{const o=y.CreateBox(e,{width:10,height:1,depth:10},s);o.position.y=t,o.physicsImpostor=new a(o,a.BoxImpostor,{mass:0,restitution:.9},s);const r=new L(`${e}Material`,s);return r.diffuseColor=new z(.5,.5,.5),o.material=r,o.physicsImpostor.physicsBody.collisionFilterGroup=i,o.physicsImpostor.physicsBody.collisionFilterMask=d|u|f|c,o};_("ground",25,f),_("lowerPlatform",20,c),(()=>{const e=y.CreateBox("greenBox",{width:1,height:1,depth:10},s);e.position.y=21,e.position.x=-4.5,e.physicsImpostor=new a(e,a.BoxImpostor,{mass:0,restitution:.9},s);const t=new L("greenBoxMaterial",s);t.diffuseColor=new z(0,1,0),e.material=t,e.physicsImpostor.physicsBody.collisionFilterGroup=W,e.physicsImpostor.physicsBody.collisionFilterMask=d|c;let i=1;const o=.05,r=-4.5,B=4.5;s.onBeforeRenderObservable.add(()=>{e.position.x+=i*o,e.position.x>=B?(e.position.x=B,i=-1):e.position.x<=r&&(e.position.x=r,i=1),s.meshes.forEach(E=>{E.name.startsWith("fragment")&&e.intersectsMesh(E,!1)&&(E.dispose(),k+=1,I.text=`Balance: ${k}`)})})})();const J=()=>{if(s.meshes.filter(t=>t.name==="box"&&!t.isCrushed).length<F){const t=y.CreateBox("box",{size:1},s);t.position=new n(Math.random()*4-2,37,Math.random()*4-2),t.rotation=new n(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),t.physicsImpostor=new a(t,a.BoxImpostor,{mass:2,restitution:.5},s),t.physicsImpostor.physicsBody.collisionFilterGroup=d|u|f|c,t.physicsImpostor.physicsBody.collisionFilterMask=d|u|f|c,t.isCrushed=!1}},v=(e,t,i,o)=>{const r=y.CreateBox("wall",{width:e,height:t,depth:i},s);r.position=o,r.isVisible=!1,r.physicsImpostor=new a(r,a.BoxImpostor,{mass:0,restitution:.9},s),r.physicsImpostor.physicsBody.collisionFilterGroup=d,r.physicsImpostor.physicsBody.collisionFilterMask=d|u|f|c};v(10,40,1,new n(0,20,-5.5)),v(10,40,1,new n(0,20,5.5)),v(1,40,10,new n(-5.5,20,0)),v(1,40,10,new n(5.5,20,0)),v(10,1,10,new n(0,40,0));const R=new L("pressMaterial",s);R.diffuseColor=new z(0,0,0);const l=y.CreateBox("leftPress",{width:2,height:3,depth:10},s);l.position=new n(-4.5,27,0),l.material=R,l.physicsImpostor=new a(l,a.BoxImpostor,{mass:0,restitution:.9},s),l.physicsImpostor.physicsBody.collisionFilterGroup=u,l.physicsImpostor.physicsBody.collisionFilterMask=d|u|f|c;const p=y.CreateBox("rightPress",{width:2,height:3,depth:10},s);p.position=new n(4.5,27,0),p.material=R,p.physicsImpostor=new a(p,a.BoxImpostor,{mass:0,restitution:.9},s),p.physicsImpostor.physicsBody.collisionFilterGroup=u,p.physicsImpostor.physicsBody.collisionFilterMask=d|u|f|c;let N=!1;const q=e=>{const i=y.CreateBox("fragment1",{size:.5},s);i.position=new n(e.x-.25,e.y,e.z),i.physicsImpostor=new a(i,a.BoxImpostor,{mass:1,restitution:.5},s),i.physicsImpostor.physicsBody.collisionFilterGroup=c,i.physicsImpostor.physicsBody.collisionFilterMask=d|c;const o=y.CreateBox("fragment2",{size:.5},s);o.position=new n(e.x+.25,e.y,e.z),o.physicsImpostor=new a(o,a.BoxImpostor,{mass:1,restitution:.5},s),o.physicsImpostor.physicsBody.collisionFilterGroup=c,o.physicsImpostor.physicsBody.collisionFilterMask=d|c;const r=B=>{if(B.physicsImpostor){const E=new n((Math.random()-.5)*2,(Math.random()-.5)*2,(Math.random()-.5)*2).normalize().scale(10);B.physicsImpostor.applyImpulse(E,B.getAbsolutePosition())}};r(i),r(o)},V=()=>{s.meshes.forEach(e=>{const t=e;t.name==="box"&&!t.isCrushed&&t.intersectsMesh(l,!1)&&t.intersectsMesh(p,!1)&&(q(t.position),t.isCrushed=!0,t.dispose())})},K=()=>{if(l.position.x===-4.5&&p.position.x===4.5){if(N)return;N=!0;const e=.1,t=10,i=Math.abs(-4.5- -.75)/e;let o=0;const r=setInterval(()=>{o<i?(l.position.x+=e,p.position.x-=e,o++,V()):o<2*i?(l.position.x-=e,p.position.x+=e,o++,V()):(clearInterval(r),l.position=new n(-4.5,27,0),p.position=new n(4.5,27,0),N=!1)},t)}},H=ce.CreateFullscreenUI("UI"),h=new g;h.width="200px",h.height="100px",h.horizontalAlignment=g.HORIZONTAL_ALIGNMENT_LEFT,h.verticalAlignment=g.VERTICAL_ALIGNMENT_TOP,h.isVertical=!0,h.top="10px",h.left="10px",H.addControl(h);const I=new $;I.text="Balance: 0",I.color="white",I.fontSize=24,I.width="200px",I.height="40px",h.horizontalAlignment=g.HORIZONTAL_ALIGNMENT_CENTER,h.addControl(I);const x=new $;x.text=`0/${F}`,x.color="white",x.fontSize=24,x.width="200px",x.height="40px",x.paddingTop="10px",h.addControl(x);const w=new g;w.width="100%",w.height="50px",w.horizontalAlignment=g.HORIZONTAL_ALIGNMENT_CENTER,w.verticalAlignment=g.VERTICAL_ALIGNMENT_BOTTOM,w.isVertical=!1,w.paddingBottom="10px",H.addControl(w);const M=le.CreateSimpleButton("pressButton","Press");M.width="150px",M.height="40px",M.color="white",M.background="black",M.onPointerDownObservable.add(()=>{K()}),w.addControl(M);const Q=setInterval(J,1e3),X=()=>{const e=s.meshes.filter(t=>t.name==="box"&&!t.isCrushed).length;x.text=`${e}/${F}`},Y=()=>{s.meshes.forEach(e=>{e.position.y<=0&&e.dispose()})};T.runRenderLoop(()=>{s.render(),Y(),X()});const j=()=>{T.resize(),b()};return window.addEventListener("resize",j),()=>{clearInterval(Q),T.dispose(),window.removeEventListener("resize",j),window.removeEventListener("resize",b),document.removeEventListener("touchstart",P),document.removeEventListener("touchmove",P)}},[]),ee.jsx("canvas",{ref:G,style:{width:"100vw",height:"100vh"},tabIndex:-1})};export{xe as default};
